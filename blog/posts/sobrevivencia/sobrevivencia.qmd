---
date: "2024-06-01"                                    
title: "Modelos de sobrevivência no R" 
author: "Alexsandro Prado"                            
categories:                                           
  - econometria
image: sobrevivencia.png

format:
  html:
    embed-resources: false
    
execute:
  echo: false
  warning: false
  error: false
  cache: true
  freeze: true
---

```{r, echo = FALSE, warning=FALSE, message=FALSE}
library(survival)
library(ggplot2)
library(dplyr)
library(LaplacesDemon)
devtools::install_github("abjur/abjData")
```

A Análise de Sobrevivência compreende os estudos em que o interesse principal é avaliar o tempo até a ocorrência de um evento pré-determinado. Esses tempos, chamados de *tempos de falha*, podem, então, ser explicados por outras variáveis a partir de modelos de regressão paramétricos ou semi-paramétricos. Uma característica fundamental desse tipo de estudo é a presença de censura, definida como a observação parcial do tempo de falha.

Para ilustrar as funções discutidas aqui, utilizaremos o banco de dados `ovarian`, do pacote `survival`. Este banco traz o tempo de sobrevivência (ou censura) de 26 mulheres com câncer de ovário e o objetivo do estudo foi comparar dois tratamentos distintos para essa doença.

Nesse exemplo, o tempo de falha é o intervalo entre a entrada no estudo e a ocorrência do evento de interesse que, aqui, é a morte da paciente. A censura neste caso é causada pelo abandono do estudo ou pela não ocorrência do evento até o fim do acompanhamento, ou seja, os casos em que a paciente estava viva no fim do estudo.

Para mais informações sobre o banco de dados, consulte o `help(ovarian)`.

### Kaplan-Meier e Log-rank

O Kaplan-Meier é a principal ferramenta para visualizar dados de sobrevivência. Esses gráficos ajustam curvas tipo-escada da proporção de indivíduos *em risco* --- que ainda não falharam e não foram censurados --- ao longo do tempo. Para plotar um Kaplan-Meier no R, utilizamos a função `survfit()` e a função `plot()`.

```{r, warning=FALSE, message=FALSE}

fit <- survfit(Surv(futime, fustat) ~ rx, data = ovarian)

plot(fit)



```

Também podemos construir um Kaplan-Meier com o `ggplot2`, mas observe que é necessário fazer algums modificações no objeto `fit`:

```{r, warning=FALSE}

m <- length(fit$strata)

df <- data.frame(time = c(rep(0, m), fit$time),
                 surv = c(rep(1, m), fit$surv),
                 group = c(names(fit$strata), 
                          rep(names(fit$strata), fit$strata)))

ggplot(data = df) +  
        geom_step(aes(x = time, y = surv, colour = as.factor(group))) +
        ylim(0, 1) +
        labs(colour = "Curvas", y = "Proporção de sobreviventes",
             x = "Tempo") 

```

O teste de log-rank para comparação de grupos é realizado pela função `survdiff()`:

```{r warning=FALSE}

survdiff(Surv(futime, fustat) ~ rx, data = ovarian)

```

### Modelos paramétricos

Para ajustar modelos paramétricos, podemos utilizar a função `survreg()`.

```{r}

fit <- survreg(Surv(futime, fustat) ~ rx + age, data = ovarian, 
               dist = "exponential")

summary(fit)

```

Observe que no exemplo acima utilizamos a distribuição Exponencial. O argumento `dist =` pode ser modificado para ajustarmos modelos com outras distribuições:

-   `dist = "weibull"` --- distribuição Weibull (default)
-   `dist = "gaussian"` --- distribuição Normal
-   `dist = "logistic"` --- distribuição Logística
-   `dist = "lognormal"` --- distribuição Log-normal
-   `dist = "loglogistic"` --- distribuição Log-logística

### Modelo semi-paramétrico de Cox

No R, a função mais utilizada para ajustar modelos de Cox é a `coxph()`.

```{r warning=FALSE}
fit <- coxph(Surv(futime, fustat) ~ age + rx, data = ovarian)

summary(fit)
```

## Generalized Additive Model (GAM)

Os modelos aditivos generalizados ou GAM são modelos baseados na teoria desenvolvida por Trevor Hastie e Robert Tibshirani, e podem ser vistos como uma generalização de GLM, no sentido de que todos os GLM sãoo casos particulares de GAM.

Na regressão normal e em GLM assumimos, em geral, que as variáveis aleatórias correspondentes aos indivíduos são independentes, e que existe uma função, denominada função de ligação, que une as médias destas variáveis aleatórias a um certo preditor linear.

A grande mudança nos modelos aditivos generalizados está na forma do preditor. Para cada variável explicativa, temos associada uma função a ser estimada (ou suavizada), sendo que o preditor fica definido como a soma dessas funções

$$
g(\mu_i) = f_0 + \sum f(x_{ij})
$$

Para evitar o desconforto da interpretação das contribuições marginais (funções), uma alternativa é utilizar as funções de suavização para ajustar variáveis de controle em que não há interesse direto, e manter a parte principal com termos paramétricos. Geralmente isso facilita a interpretação e melhora o ajuste do modelo em relação ao GLM.

### Pacote mgcv

O pacote `mgcv` é um dos pacotes mais completos do R e permite simulação, ajuste, visualização e análise de resíduos para `gam`. O pacote gerou até [um livro](http://books.google.co.uk/books?id=hr17lZC-3jQC).

Na prática, a utilização do GAM não difere muito de modelos GLM. Uma das únicas diferenças na especificação do modelo é que podemos utilizar a função `s` para determinar quais termos queremos que sejam ajustados com funções aditivas.

### Exemplo: PNUD

```{r warning=FALSE}
pnud_muni = abjData::pnud_muni

library(mgcv)
fit_model <- gam(espvida ~ ano + s(rdpc) + s(i_escolaridade), data = pnud_muni, family = Gamma)

summary(fit_model)

par(mfrow = c(1, 2))
plot(fit_model, scheme = 1)
```

### Pacote gamlss

Se por algum motivo existir algum problema na análise em relação à distribuição, heterocedasticidade, e utilização de preditores lineares, uma possível alternativa é o GAMLSS.

GAMLSS significa Generalized Additive Models for Location, Scale and Shape. Com GAMLSS é possível modelar não só a média da distribuição $\mu_i$ (primeiro momento), mas também a variância $\sigma_i$ (segundo momento), a assimetria $\phi_i$ (terceiro momento) e a curtose $\rho_i$ (quarto momento), usando preditores.

Por ser um modelo aditivo, o GAMLSS permite que sejam adicionados termos de suavização na fórmula do modelo, o que o torna uma generalização natural do GAM (em relação à modelagem, não ao método de ajuste).

Por fim, o modelo GAMLSS possui **mais de 50** famílias de distribuições implementadas, o que nos dá uma enorme gama de opções para criação de modelos.

Também é possível adicionar efeitos aleatórios utilizando o GAMLSS, mas essa parte ainda é experimental.

Mas tudo vem com um preço. Por ser um grande canhão, o método de ajuste de modelos GAMLSS geralmente são baseados técnicas de otimização aproximadas. Além disso, o ajuste de modelos pode ser mais lento que os concorrentes. Por fim, a análise de resíduos para GAMLSS é bastante limitada (e provavelmente continuará sendo).

Recomendamos a utilização do `gamlss` com muito cuidado, e sempre acompanhando outras modelagens, usando `glm` ou `gam`, por exemplo.

### Exemplo: PNUD

```{r warning=FALSE}
library(gamlss)

# Cuidado! O pacote gamlss carrega MASS, que por sua vez mascara a função select do dplyr.

dados <- pnud_muni %>% 
  dplyr::select(rdpc, i_escolaridade, espvida, ano) %>% 
  na.omit %>% 
  mutate(ano = factor(ano))

fit_model <- gamlss(formula = espvida ~ cs(rdpc) + cs(i_escolaridade),
                    sigma.formula = ~ ano,
                    data = dados, 
                    family = NET())

summary(fit_model)

plot(fit_model)
```

Para mais informações sobre Análise de Sobrevivência, consultar as seguintes referências:

-   Colosimo, E.A. e Giolo, S.R.. (2005) Análise de Sobrevivência Aplicada. ABE --- Projeto fisher. Editora Edgard Blucher

-   Kalbfleisch, J. D.; Prentice, Ross L. (2002). The statistical analysis of failure time data. New York: John Wiley & Sons.

-   Lawless, Jerald F. (2003). Statistical Models and Methods for Lifetime Data (2nd ed.). Hoboken: John Wiley and Sons.

## Referências

CURSO-R. **curso-r.github.com**. Disponível em: https://github.com/curso-r/curso-r.github.com/. Acesso em: 02 jun. 2024.
